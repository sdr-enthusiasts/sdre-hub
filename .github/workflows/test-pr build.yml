name: Test PR Build

# FIXME: Can we not build either job if stuff has been unchanged since last commit for that job?
# FIXME: Use branch name for tagging docker build
on:
  workflow_dispatch:
    inputs:
      reason:
        required: true
        description: "Reason for running this workflow"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  acarshub-typescript:
    runs-on: ubuntu-latest
    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4.1.3

      # Get version tag
      # git log -1 : get the latest commit
      # --format="%ct" : committer date, UNIX timestamp
      # Then using `date` to format to YYYYMMDD format
  #     - name: Get the version tag
  #       run: |
  #         echo "VERSION=$(sed '1!d' ./version-nextgen)" >> $GITHUB_ENV

  #     # Show version tag
  #     - name: Show version tag
  #       run: |
  #         echo "ACARS Hub Version: ${{ env.VERSION }}"

  #     - name: Build ACARSHub typescript test
  #       working-directory: ./acarshub-typescript
  #       run: |
  #         set -xe
  #         npm install
  #         sed -i 's/Pre-Release/ACARS Hub NextGen Pre-Release: ${{ env.VERSION }} Build ${{ github.run_number }}/' ./src/helpers/menu.ts
  #         npm run build
  #         mkdir -p ./webapp/static/images
  #         mkdir -p ./webapp/static/js
  #         mkdir -p ./webapp/static/sounds
  #         mkdir -p ./webapp/templates
  #         cp -r ./dist/static/images ./webapp/static/
  #         cp -r ./dist/static/sounds ./webapp/static/
  #         cp -r ./dist/static/js ./webapp/static/
  #         mv ./dist/static/index.html ./webapp/templates/
  #         tar cvfz webapp.tar.gz ./webapp
  #         cp webapp.tar.gz ../webapp.tar.gz

  #     - name: Save webapp.tar.gz
  #       uses: actions/upload-artifact@v4.3.1
  #       with:
  #         name: webapp
  #         path: |
  #           ./webapp.tar.gz

  # hadolint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4.1.3
  #     - name: Pull hadolint/hadolint:latest Image
  #       run: docker pull hadolint/hadolint:latest
  #     - name: Run hadolint against Dockerfiles
  #       run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint $(find . -type f -iname "Dockerfile*")

  # deploy:
  #   name: Deploy
  #   uses: sdr-enthusiasts/common-github-workflows/.github/workflows/build_and_push_image.yml@main
  #   with:
  #     push_enabled: false
  #     push_destinations: ghcr.io
  #     ghcr_repo_owner: ${{ github.repository_owner }}
  #     ghcr_repo: ${{ github.repository }}
  #     # set build_latest to true if github.event.inputs.use_test_image is false
  #     build_latest: true
  #     build_baseimage_test: false
  #     # only build the entire stack if we are not using the test image
  #     build_version_specific: false
  #     build_platform_specific: false
  #     build_nohealthcheck: false
  #     get_version_method: file_in_container:file=/acarshub_version
  #   secrets:
  #     ghcr_token: ${{ secrets.GITHUB_TOKEN }}
